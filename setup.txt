# App.js frontend Socket Configuration
# Use case: Frontend application connecting to the backend server via WebSocket
# filepath: e:/2024 RESET/fullStackOpenAI/FrontEnd/src/App.js
# Note: Socket connection is now handled in Concierge.js and useSocket.js
# const socketInstance = io('http://localhost:5000', { path: '/socket.io' });

# Concierge.js frontend Socket Configuration
# Use case: Frontend application connecting to the backend server via WebSocket
# filepath: e:/2024 RESET/fullStackOpenAI/FrontEnd/src/components/Concierge.js
const socketInstance = io(REACT_APP_API_BASE_URL, { path: '/socket.io' });

# useSocket.js frontend Socket Configuration
# Use case: Frontend application connecting to the backend server via WebSocket
# filepath: e:/2024 RESET/fullStackOpenAI/FrontEnd/src/hooks/useSocket.js
const socketInstance = io('http://localhost:5000', {
  path: '/socket.io',
  transports: ['websocket', 'polling'],
  reconnection: true,
  reconnectionAttempts: 5,
  reconnectionDelay: 1000,
  timeout: 60000,
  autoConnect: true,
  forceNew: true,
  namespace: '/ws'
});

# FlaskServer.py Socket Configuration
# Use case: Backend server using Flask-SocketIO to handle WebSocket connections
# filepath: e:/2024 RESET/fullStackOpenAI/backend/FlaskServer.py
socketio = SocketIO(
    app,
    cors_allowed_origins="*",
    async_mode='threading',
    path='/socket.io',
    logger=True,
    engineio_logger=True,
    ping_timeout=60000,
    ping_interval=25000
)

# FlaskServer.py ChromaDB Configuration
# Use case: Backend server initializing ChromaDB client and collection
# filepath: e:/2024 RESET/fullStackOpenAI/backend/FlaskServer.py
# ChromaDB is running locally on port 8000
chroma_client = chromadb.Client(host="localhost", port=8000)
collection = chroma_client.create_collection("digital_media_tasks")

# Port Assignments
# port5000: Flask server (backend) - Serves API endpoints and handles Socket.IO connections
# port3000: React application (frontend) - Interacts with the backend through API calls
# port8000: ChromaDB - Vector database

# Data Flow
# Frontend (port 3000) communicates with Flask server (port 5000) for API requests and WebSocket connections.
# Flask server acts as a data fork funnel for the frontend API calls.
# Flask server interacts with ChromaDB (port 8000) for RAG operations.

# Notes
# The flask server is a data fork funnel for the frontend API calls.
# The front end should work like this:
# The app.js maintains state.
# When components generate responses, they update the state.
# Each endpoint monitors state and changes behavior based on state.
# The DisplayArea renders only what useState('response') presents, and all other components return their setResponse('message', 'savedPath') to state.
# ChromaDB is initialized within FlaskServer.py and stores data related to RAG tasks.


