# App.js frontend Socket Configuration
# Use case: Frontend application connecting to the backend server via WebSocket
# filepath: /e:/2024 RESET/fullStackOpenAI/FrontEnd/src/App.js
const socketInstance = io('http://localhost:5000', { path: '/ws' });

# server.py chromadb Socket Configuration
# Use case: Backend server using Flask-SocketIO to handle WebSocket connections
# filepath: /e:/2024 RESET/fullStackOpenAI/backend/server.py
from flask_socketio import SocketIO
socketio = SocketIO(app, cors_allowed_origins="http://localhost:5000")

# server.js openai Socket Configuration
# Use case: Backend server using Socket.IO to handle WebSocket connections for OpenAI services
# filepath: /e:/2024 RESET/fullStackOpenAI/backend/src/server.js
const socketio = SocketIO(app, { cors: { origin: "http://localhost:5000" } });

# flaskserver Socket Configuration
# Use case: Backend server using Socket.IO to handle WebSocket connections for Flask services
# filepath: /e:/2024 RESET/fullStackOpenAI/backend/src/flaskserver.js
const socketio = SocketIO(app, { cors: { origin: "http://localhost:5000" } });

# flaskserver chromadb Socket Configuration
# Use case: Backend server using Socket.IO to handle WebSocket connections for ChromaDB services
# filepath: /e:/2024 RESET/fullStackOpenAI/backend/src/flaskserver.js
const chromadbSocket = SocketIO(app, { cors: { origin: "http://localhost:8001" } });  # Changed port to 8001

all port5000 accesspoints are port:5000/
all port5000 chromadb accesspoints are port:5000/api/
all port8000 accesspoints and schema are defined at localhost:8001/docs
all port8000 endpoints are localhost:8001/openai.json
frontend only access port5000 accesspoints.

all backend endpoints are exposed to localhost3000 via flaskserver responses and endpoints.
so the full menu is 
flaskserver/
flaskserver/api = chromadb
flaskerver/ = openai routes

to the front end - all routes are port5000
the flask server is a data fork funnel for the frontend api calls.

the front end should work like this.
the app.js maintains state, 
when components generate responses - they raise response to state to state each endpoint monitors state and changes behavior based off state.

the display area renders only what useState('response') presents - and all other components return their setResponse('message', 'savedPath') to state.

the display area is alway full available width and
text displays first, beneath that is audio controls and 
BEHIND that is full width image, video displays 
there may be a need to show more than one at a time depending on responses from server.

the main thread initiates once when server loads.
all threads have three parts :

task
assistant
messages

thread assistant instructions are augmented by the thread task and the assistant communicates via messages - which are shared with main thread.

all threads are clones and only their directions are different. 
all assistants are clones and only their tasks are different
all  tasks when completed close the thread.
the main thread is never complete because task one is to maintain the main thread.

on load init socket then only when an api enpoint is accessed.
when given a task - the assistant tries to break task into smaller parts. 
and assign steps to new thread for execution -


